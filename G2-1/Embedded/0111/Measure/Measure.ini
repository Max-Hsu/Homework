/******************************************************************************/
/* MEASURE.INI: Measure Debug Initialization File                             */
/******************************************************************************/
/* This file is part of the uVision/ARM development tools.                    */
/* Copyright (c) 2005-2006 Keil Software. All rights reserved.                */
/* This software may only be used under the terms of a valid, current,        */
/* end user licence from KEIL for a compatible version of KEIL software       */
/* development tools. Nothing else gives you the right to use this software.  */
/******************************************************************************/

/*--------------------------------------------*/
/* MyStatus shows analog and other values ... */
/*--------------------------------------------*/

Signal void T_button(float timea , int shift){
	int x;
	int y;
	float z;
	x = 3000;
	
	for(;x>1;){
		y = rand(0);
		y = y/100;
		y = y%x;
		z = y;
		port0 &= ~(1<<shift);
		
		swatch(z/1000000);
		port0 |= (1<<shift);
		x -= y;
		//printf("%d\n",x);
		
		y = rand(0);
		y = y/100;
		y = y%x;
		z = y;
		swatch(z/1000000);
		x -= y;
		//printf("%d\n",x);
	}
	
	//printf("ckec\n");
	port0 |= (1<<shift);
	swatch(timea/1000);
	x = 3000;
	for(;x>1;){
		y = rand(0);
		y = y/100;
		y = y%x;
		z = y;
		port0 |= (1<<shift);
		
		swatch(z/1000000);
		port0 &= ~(0<<shift);
		x -= y;
		//printf("%d\n",x);
		
		y = rand(0);
		y = y%x;
		z = y;
		swatch(z/1000000);
		x -= y;
		//printf("%d\n",x);
	}
	//printf("ckec1\n");
	port0 &= ~(1<<shift);
	printf("end\n");
}

signal void startL(void){
	unsigned int command_for_L;
	unsigned int command_for_R;
	unsigned int P_command_for_L;
	unsigned int P_command_for_R;
	int open;
	open = 0;
	while(1){
		command_for_L = port1&0x30000000;
		command_for_L = command_for_L>>28;
		command_for_R = port1&0xC0000000;
		command_for_R = command_for_R>>30;//printf("CL:%d\tCR:%d\t",command_for_L,command_for_R);
		if((P_command_for_R != command_for_R) ||(P_command_for_L != command_for_L)){
			printf("CL:%d\tCR:%d\t",command_for_L,command_for_R);
		}
		P_command_for_R = command_for_R;
		P_command_for_L = command_for_L;
		switch (command_for_L){
			case 0:
				swatch(0.1);
				break;
			case 1:
				//printf("I am code 1\n");
				port0 &= ~(1<<21);
				swatch(0.1);
				port0 |= (1<<21);
				swatch(8);
				port0 &= ~(1<<21);
				break;
			case 2:
				//printf("I am code 2\n");
				port0 &= ~(1<<21);
				swatch(0.1);
				port0 |= (1<<21);
				swatch(8);
				port0 &= ~(1<<21);
				break;
			case 3:
				//printf("I am code 3\n");

				port0 &= ~(1<<20);
				swatch(0.1);
				port0 |= (1<<20);
				swatch(1.5);
				port0 &= ~(1<<20);
				//swatch(0.1);
				break;
		}
		/*
		switch (command_for_R){
			case 0:
				swatch(0.01);
				break;
			case 1:
				//printf("I am code 1\n");
				port0 &= ~(1<<23);
				swatch(0.1);
				port0 |= (1<<23);
				swatch(8);
				port0 &= ~(1<<23);
				break;
			case 2:
				//printf("I am code 2\n");
				port0 &= ~(1<<23);
				swatch(0.1);
				port0 |= (1<<23);
				swatch(8);
				port0 &= ~(1<<23);
				break;
			case 3:
				//printf("I am code 3\n");

				port0 &= ~(1<<22);
				swatch(0.1);
				port0 |= (1<<22);
				swatch(1.5);
				port0 &= ~(1<<22);
				//swatch(0.1);
				break;
		}
		*/
		swatch(0.1);
		
		/*switch (command_for_R){
			case 0:
				break;
			case 1:
				break;
			case 2:
				break;
			case 3:
				break;
		}*/
		
	}
}
signal void startR(void){
	unsigned int command_for_L;
	unsigned int command_for_R;
	unsigned int P_command_for_L;
	unsigned int P_command_for_R;
	int open;
	open = 0;
	while(1){
		command_for_L = port1&0x30000000;
		command_for_L = command_for_L>>28;
		command_for_R = port1&0xC0000000;
		command_for_R = command_for_R>>30;//printf("CL:%d\tCR:%d\t",command_for_L,command_for_R);
		if((P_command_for_R != command_for_R) ||(P_command_for_L != command_for_L)){
			printf("CL:%d\tCR:%d\t",command_for_L,command_for_R);
		}
		P_command_for_R = command_for_R;
		P_command_for_L = command_for_L;
		/*
		switch (command_for_L){
			case 0:
				swatch(0.1);
				break;
			case 1:
				//printf("I am code 1\n");
				port0 &= ~(1<<21);
				swatch(0.1);
				port0 |= (1<<21);
				swatch(8);
				port0 &= ~(1<<21);
				break;
			case 2:
				//printf("I am code 2\n");
				port0 &= ~(1<<21);
				swatch(0.1);
				port0 |= (1<<21);
				swatch(8);
				port0 &= ~(1<<21);
				break;
			case 3:
				//printf("I am code 3\n");

				port0 &= ~(1<<20);
				swatch(0.1);
				port0 |= (1<<20);
				swatch(1.5);
				port0 &= ~(1<<20);
				//swatch(0.1);
				break;
		}*/
		switch (command_for_R){
			case 0:
				swatch(0.1);
				break;
			case 1:
				//printf("I am code 1\n");
				port0 &= ~(1<<23);
				swatch(0.1);
				port0 |= (1<<23);
				swatch(8);
				port0 &= ~(1<<23);
				break;
			case 2:
				//printf("I am code 2\n");
				port0 &= ~(1<<23);
				swatch(0.1);
				port0 |= (1<<23);
				swatch(8);
				port0 &= ~(1<<23);
				break;
			case 3:
				//printf("I am code 3\n");

				port0 &= ~(1<<22);
				swatch(0.1);
				port0 |= (1<<22);
				swatch(1.5);
				port0 &= ~(1<<22);
				//swatch(0.1);
				break;
		}
		swatch(0.1);
		/*switch (command_for_R){
			case 0:
				break;
			case 1:
				break;
			case 2:
				break;
			case 3:
				break;
		}*/
		
	}
}
port0 = 0;
/*pin 6,7 is the replacement for pin*/
Define button "L<|>", "T_button(47,6)"
Define button "L1", "T_button(47,7)"
Define button "L2", "T_button(47,10)"
Define button "L3", "T_button(47,11)"
Define button "R<|>", "T_button(47,12)"
Define button "R1", "T_button(47,13)"
Define button "R2", "T_button(47,14)"
Define button "R3", "T_button(47,15)"
Define button "1^", "T_button(47,16)"
Define button "2^", "T_button(47,17)"
Define button "2v", "T_button(47,18)"
Define button "3v", "T_button(47,19)"
Define button "startL", "startL()"
Define button "startR", "startR()"
