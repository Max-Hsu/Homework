/******************************************************************************/
/* MEASURE.INI: Measure Debug Initialization File                             */
/******************************************************************************/
/* This file is part of the uVision/ARM development tools.                    */
/* Copyright (c) 2005-2006 Keil Software. All rights reserved.                */
/* This software may only be used under the terms of a valid, current,        */
/* end user licence from KEIL for a compatible version of KEIL software       */
/* development tools. Nothing else gives you the right to use this software.  */
/******************************************************************************/

/*--------------------------------------------*/
/* MyStatus shows analog and other values ... */
/*--------------------------------------------*/
FUNC void MyStatus (void)  {
  printf ("=============================\n");
  printf (" Analog-Input-0:  %f\n", ain0);
  printf (" Analog-Input-1:  %f\n", ain1);
  printf (" Analog-Input-2:  %f\n", ain2);
  printf (" Analog-Input-3:  %f\n", ain3);
  printf (" Port 0: %08X\n", port0);
  printf ("=============================\n");
}

/*------------------------------------------------------------------*/
/* Analog0() simulates analog input values given to channel-0 (AD0) */
/*------------------------------------------------------------------*/
Signal void analog0 (float limit)  {
  float volts;

  printf ("Analog0 (%f) entered.\n", limit);
  while (1)  {          /* forever */
    volts = 0;
    while (volts <= limit)  {
      ain0 = volts;     /* analog input-0 */
      swatch (0.01);    /* wait 0.01 seconds */
      volts += 0.1;     /* increase voltage */
    }
    volts = limit;
    while (volts >= 0.0)  {
      ain0 = volts;
      swatch (0.01);    /* wait 0.01 seconds */
      volts -= 0.1;     /* decrease voltage */
    }
  }
}

/*
for trying the set port0
try port0 =....
*/
Signal void Bumpy(void){
	
	
}

Signal void T_button(float timea){
	int x;
	int y;
	float z;
	x = 3000;
	
	for(;x>1;){
		y = rand(0);
		y = y/100;
		y = y%x;
		z = y;
		port0 = 0;
		
		swatch(z/1000000);
		port0 = 0x10000;
		x -= y;
		//printf("%d\n",x);
		
		y = rand(0);
		y = y/100;
		y = y%x;
		z = y;
		swatch(z/1000000);
		x -= y;
		//printf("%d\n",x);
	}
	
	//printf("ckec\n");
	port0 = 0x10000;
	swatch(timea/1000);
	x = 3000;
	for(;x>1;){
		y = rand(0);
		y = y/100;
		y = y%x;
		z = y;
		port0 = 0x10000;
		
		swatch(z/1000000);
		port0 = 0;
		x -= y;
		//printf("%d\n",x);
		
		y = rand(0);
		y = y%x;
		z = y;
		swatch(z/1000000);
		x -= y;
		//printf("%d\n",x);
	}
	//printf("ckec1\n");
	port0 = 0;
	printf("end\n");
}

Signal void blip(void){
	port0 = 0x10000;
	swatch(2.0/1000);
	port0 = 0;
}
port0 = 0;
Define button "Button_47ms", "T_button(47)"
Define button "Button_97ms", "T_button(97)"
Define button "Blip" , "blip()"